
is1300ProjectLaptop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003b40  08003b40  00013b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b9c  08003b9c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003b9c  08003b9c  00013b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ba4  08003ba4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba4  08003ba4  00013ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000014  08003bc0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003bc0  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c86c  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002011  00000000  00000000  0002c8f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  0002e908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000874  00000000  00000000  0002f420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bd9  00000000  00000000  0002fc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e223  00000000  00000000  0005586d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e60dc  00000000  00000000  00063a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002bbc  00000000  00000000  00149b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0014c728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b28 	.word	0x08003b28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003b28 	.word	0x08003b28

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	4b58      	ldr	r3, [pc, #352]	; (800063c <MX_GPIO_Init+0x178>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a57      	ldr	r2, [pc, #348]	; (800063c <MX_GPIO_Init+0x178>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b55      	ldr	r3, [pc, #340]	; (800063c <MX_GPIO_Init+0x178>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	4b52      	ldr	r3, [pc, #328]	; (800063c <MX_GPIO_Init+0x178>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a51      	ldr	r2, [pc, #324]	; (800063c <MX_GPIO_Init+0x178>)
 80004f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b4f      	ldr	r3, [pc, #316]	; (800063c <MX_GPIO_Init+0x178>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b4c      	ldr	r3, [pc, #304]	; (800063c <MX_GPIO_Init+0x178>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a4b      	ldr	r2, [pc, #300]	; (800063c <MX_GPIO_Init+0x178>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4b49      	ldr	r3, [pc, #292]	; (800063c <MX_GPIO_Init+0x178>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b46      	ldr	r3, [pc, #280]	; (800063c <MX_GPIO_Init+0x178>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	4a45      	ldr	r2, [pc, #276]	; (800063c <MX_GPIO_Init+0x178>)
 8000528:	f043 0302 	orr.w	r3, r3, #2
 800052c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052e:	4b43      	ldr	r3, [pc, #268]	; (800063c <MX_GPIO_Init+0x178>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	f003 0302 	and.w	r3, r3, #2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2120      	movs	r1, #32
 800053e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000542:	f000 fef5 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800054c:	483c      	ldr	r0, [pc, #240]	; (8000640 <MX_GPIO_Init+0x17c>)
 800054e:	f000 feef 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_595_GPIO_Port, Enable_595_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	483b      	ldr	r0, [pc, #236]	; (8000644 <MX_GPIO_Init+0x180>)
 8000558:	f000 feea 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Reset_595_GPIO_Port, Reset_595_Pin, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000566:	f000 fee3 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800056a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000570:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4619      	mov	r1, r3
 8000580:	4830      	ldr	r0, [pc, #192]	; (8000644 <MX_GPIO_Init+0x180>)
 8000582:	f000 fd13 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000586:	2320      	movs	r3, #32
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2300      	movs	r3, #0
 8000594:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a0:	f000 fd04 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STCP_595_Pin;
 80005a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STCP_595_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	4820      	ldr	r0, [pc, #128]	; (8000640 <MX_GPIO_Init+0x17c>)
 80005be:	f000 fcf5 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TL2_Car_Pin|PL2_Switch_Pin;
 80005c2:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4619      	mov	r1, r3
 80005d6:	481a      	ldr	r0, [pc, #104]	; (8000640 <MX_GPIO_Init+0x17c>)
 80005d8:	f000 fce8 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Enable_595_Pin;
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Enable_595_GPIO_Port, &GPIO_InitStruct);
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4619      	mov	r1, r3
 80005f2:	4814      	ldr	r0, [pc, #80]	; (8000644 <MX_GPIO_Init+0x180>)
 80005f4:	f000 fcda 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Reset_595_Pin;
 80005f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Reset_595_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f000 fcca 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL4_Car_Pin;
 8000618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000622:	2301      	movs	r3, #1
 8000624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f000 fcbc 	bl	8000fac <HAL_GPIO_Init>

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	; 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000
 8000640:	48000400 	.word	0x48000400
 8000644:	48000800 	.word	0x48000800

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 fb28 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f809 	bl	8000666 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f7ff ff36 	bl	80004c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000658:	f000 fa6c 	bl	8000b34 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800065c:	f000 f85a 	bl	8000714 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  Test_program();
#else
  traffic();
 8000660:	f000 f958 	bl	8000914 <traffic>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0x1c>

08000666 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b096      	sub	sp, #88	; 0x58
 800066a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2244      	movs	r2, #68	; 0x44
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f003 fa2a 	bl	8003ace <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000688:	f44f 7000 	mov.w	r0, #512	; 0x200
 800068c:	f000 fe76 	bl	800137c <HAL_PWREx_ControlVoltageScaling>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000696:	f000 f837 	bl	8000708 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069a:	2302      	movs	r3, #2
 800069c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006b4:	230a      	movs	r3, #10
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fead 	bl	8001428 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006d4:	f000 f818 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2303      	movs	r3, #3
 80006de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	2104      	movs	r1, #4
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fa75 	bl	8001be0 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006fc:	f000 f804 	bl	8000708 <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3758      	adds	r7, #88	; 0x58
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x8>
	...

08000714 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_SPI3_Init+0x74>)
 800071a:	4a1c      	ldr	r2, [pc, #112]	; (800078c <MX_SPI3_Init+0x78>)
 800071c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_SPI3_Init+0x74>)
 8000720:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000724:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_SPI3_Init+0x74>)
 8000728:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800072c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_SPI3_Init+0x74>)
 8000730:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000734:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_SPI3_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_SPI3_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_SPI3_Init+0x74>)
 8000744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000748:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_SPI3_Init+0x74>)
 800074c:	2230      	movs	r2, #48	; 0x30
 800074e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <MX_SPI3_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_SPI3_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_SPI3_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_SPI3_Init+0x74>)
 8000764:	2207      	movs	r2, #7
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_SPI3_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_SPI3_Init+0x74>)
 8000770:	2208      	movs	r2, #8
 8000772:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_SPI3_Init+0x74>)
 8000776:	f002 f913 	bl	80029a0 <HAL_SPI_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8000780:	f7ff ffc2 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000030 	.word	0x20000030
 800078c:	40003c00 	.word	0x40003c00

08000790 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a25      	ldr	r2, [pc, #148]	; (8000844 <HAL_SPI_MspInit+0xb4>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d144      	bne.n	800083c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <HAL_SPI_MspInit+0xb8>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b6:	4a24      	ldr	r2, [pc, #144]	; (8000848 <HAL_SPI_MspInit+0xb8>)
 80007b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007bc:	6593      	str	r3, [r2, #88]	; 0x58
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <HAL_SPI_MspInit+0xb8>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <HAL_SPI_MspInit+0xb8>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <HAL_SPI_MspInit+0xb8>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <HAL_SPI_MspInit+0xb8>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <HAL_SPI_MspInit+0xb8>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a18      	ldr	r2, [pc, #96]	; (8000848 <HAL_SPI_MspInit+0xb8>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <HAL_SPI_MspInit+0xb8>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800080c:	2306      	movs	r3, #6
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	480d      	ldr	r0, [pc, #52]	; (800084c <HAL_SPI_MspInit+0xbc>)
 8000818:	f000 fbc8 	bl	8000fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800081c:	2320      	movs	r3, #32
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800082c:	2306      	movs	r3, #6
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <HAL_SPI_MspInit+0xc0>)
 8000838:	f000 fbb8 	bl	8000fac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40003c00 	.word	0x40003c00
 8000848:	40021000 	.word	0x40021000
 800084c:	48000800 	.word	0x48000800
 8000850:	48000400 	.word	0x48000400

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x44>)
 800085c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_MspInit+0x44>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6613      	str	r3, [r2, #96]	; 0x60
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_MspInit+0x44>)
 8000868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_MspInit+0x44>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <HAL_MspInit+0x44>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6593      	str	r3, [r2, #88]	; 0x58
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_MspInit+0x44>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler+0x4>

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler+0x4>

080008ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>

080008ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e8:	f000 fa36 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	; (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <traffic>:

/**
 @brief Implements the main traffic light control logic.
 */
void traffic(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
	State = Start;
 800091a:	4b4d      	ldr	r3, [pc, #308]	; (8000a50 <traffic+0x13c>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
	NextState = Start;
 8000920:	4b4c      	ldr	r3, [pc, #304]	; (8000a54 <traffic+0x140>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]

	while(1){

		State = NextState;
 8000926:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <traffic+0x140>)
 8000928:	781a      	ldrb	r2, [r3, #0]
 800092a:	4b49      	ldr	r3, [pc, #292]	; (8000a50 <traffic+0x13c>)
 800092c:	701a      	strb	r2, [r3, #0]
				switch (State) // State machine
 800092e:	4b48      	ldr	r3, [pc, #288]	; (8000a50 <traffic+0x13c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b03      	cmp	r3, #3
 8000934:	f200 8088 	bhi.w	8000a48 <traffic+0x134>
 8000938:	a201      	add	r2, pc, #4	; (adr r2, 8000940 <traffic+0x2c>)
 800093a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093e:	bf00      	nop
 8000940:	08000951 	.word	0x08000951
 8000944:	080009b3 	.word	0x080009b3
 8000948:	080009f3 	.word	0x080009f3
 800094c:	08000a1f 	.word	0x08000a1f
				{
					case Start:
					    uint8_t startLeds[3] = {0x20, 0x0C, 0}; //Bits for PL=red and TL=green
 8000950:	4a41      	ldr	r2, [pc, #260]	; (8000a58 <traffic+0x144>)
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	6812      	ldr	r2, [r2, #0]
 8000958:	4611      	mov	r1, r2
 800095a:	8019      	strh	r1, [r3, #0]
 800095c:	3302      	adds	r3, #2
 800095e:	0c12      	lsrs	r2, r2, #16
 8000960:	701a      	strb	r2, [r3, #0]
					    uint8_t blinkingLED[3] = {0x20, 0x2C, 0}; //Keeping the same bits on but also blue indicator
 8000962:	4a3e      	ldr	r2, [pc, #248]	; (8000a5c <traffic+0x148>)
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	6812      	ldr	r2, [r2, #0]
 800096a:	4611      	mov	r1, r2
 800096c:	8019      	strh	r1, [r3, #0]
 800096e:	3302      	adds	r3, #2
 8000970:	0c12      	lsrs	r2, r2, #16
 8000972:	701a      	strb	r2, [r3, #0]

					    ShiftREG(startLeds, 3);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2103      	movs	r1, #3
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f880 	bl	8000a80 <ShiftREG>

					    if (HAL_GPIO_ReadPin(GPIOB ,PL2_Switch_Pin) == GPIO_PIN_RESET)
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	4837      	ldr	r0, [pc, #220]	; (8000a60 <traffic+0x14c>)
 8000984:	f000 fcbc 	bl	8001300 <HAL_GPIO_ReadPin>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d15e      	bne.n	8000a4c <traffic+0x138>
					    	    {
					    	// when pressing button first blinking with same leds before changing state
					    	toggleLEDWithFrequency(toggleFreq, (pedestrianDelay-orangeDelay),blinkingLED, startLeds);
 800098e:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <traffic+0x150>)
 8000990:	8818      	ldrh	r0, [r3, #0]
 8000992:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <traffic+0x154>)
 8000994:	881a      	ldrh	r2, [r3, #0]
 8000996:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <traffic+0x158>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	b299      	uxth	r1, r3
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	f107 0210 	add.w	r2, r7, #16
 80009a6:	f000 f891 	bl	8000acc <toggleLEDWithFrequency>
					    	      NextState = BlinkingWhileOrange;
 80009aa:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <traffic+0x140>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
					    	        }

					break;
 80009b0:	e04c      	b.n	8000a4c <traffic+0x138>

					case BlinkingWhileOrange: //next state
					{

							uint8_t blinkingLED[3] = {0x10, 0x2A, 0}; //same logic as above, bur rather TL=Orange
 80009b2:	4a2f      	ldr	r2, [pc, #188]	; (8000a70 <traffic+0x15c>)
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	6812      	ldr	r2, [r2, #0]
 80009ba:	4611      	mov	r1, r2
 80009bc:	8019      	strh	r1, [r3, #0]
 80009be:	3302      	adds	r3, #2
 80009c0:	0c12      	lsrs	r2, r2, #16
 80009c2:	701a      	strb	r2, [r3, #0]
							uint8_t leds[3] = {0x10, 0x0A, 0};
 80009c4:	4a2b      	ldr	r2, [pc, #172]	; (8000a74 <traffic+0x160>)
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	6812      	ldr	r2, [r2, #0]
 80009cc:	4611      	mov	r1, r2
 80009ce:	8019      	strh	r1, [r3, #0]
 80009d0:	3302      	adds	r3, #2
 80009d2:	0c12      	lsrs	r2, r2, #16
 80009d4:	701a      	strb	r2, [r3, #0]

							toggleLEDWithFrequency(toggleFreq, orangeDelay, blinkingLED, leds);
 80009d6:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <traffic+0x150>)
 80009d8:	8818      	ldrh	r0, [r3, #0]
 80009da:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <traffic+0x158>)
 80009dc:	8819      	ldrh	r1, [r3, #0]
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	f107 020c 	add.w	r2, r7, #12
 80009e6:	f000 f871 	bl	8000acc <toggleLEDWithFrequency>

							NextState = PedestrianWalk;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <traffic+0x140>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	701a      	strb	r2, [r3, #0]

					}
					break;
 80009f0:	e02d      	b.n	8000a4e <traffic+0x13a>
					case PedestrianWalk: //next state
					{
						uint8_t herrgoman[3] = {0x08, 0x11, 0}; //green for PL, red for TL
 80009f2:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <traffic+0x164>)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	6812      	ldr	r2, [r2, #0]
 80009f8:	4611      	mov	r1, r2
 80009fa:	8019      	strh	r1, [r3, #0]
 80009fc:	3302      	adds	r3, #2
 80009fe:	0c12      	lsrs	r2, r2, #16
 8000a00:	701a      	strb	r2, [r3, #0]

							ShiftREG(herrgoman,3);
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2103      	movs	r1, #3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f83a 	bl	8000a80 <ShiftREG>
							HAL_Delay(walkingDelay); //keeping lights in this stage for walkingDelay ms
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <traffic+0x168>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f9c1 	bl	8000d98 <HAL_Delay>
							NextState = OrangeForCars;
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <traffic+0x140>)
 8000a18:	2203      	movs	r2, #3
 8000a1a:	701a      	strb	r2, [r3, #0]

					}
					break;
 8000a1c:	e017      	b.n	8000a4e <traffic+0x13a>
					case OrangeForCars: // next state, same logic as above but different leds.
					{
						uint8_t orange[3] = {0x10, 0x0A, 0};
 8000a1e:	4a15      	ldr	r2, [pc, #84]	; (8000a74 <traffic+0x160>)
 8000a20:	463b      	mov	r3, r7
 8000a22:	6812      	ldr	r2, [r2, #0]
 8000a24:	4611      	mov	r1, r2
 8000a26:	8019      	strh	r1, [r3, #0]
 8000a28:	3302      	adds	r3, #2
 8000a2a:	0c12      	lsrs	r2, r2, #16
 8000a2c:	701a      	strb	r2, [r3, #0]

							ShiftREG(orange,3);
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2103      	movs	r1, #3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f824 	bl	8000a80 <ShiftREG>
							HAL_Delay(orangeDelay);
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <traffic+0x158>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 f9ab 	bl	8000d98 <HAL_Delay>
							NextState = Start; // go back to start
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <traffic+0x140>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]

					}
					default:
					break;
 8000a48:	bf00      	nop
 8000a4a:	e76c      	b.n	8000926 <traffic+0x12>
					break;
 8000a4c:	bf00      	nop
		State = NextState;
 8000a4e:	e76a      	b.n	8000926 <traffic+0x12>
 8000a50:	20000094 	.word	0x20000094
 8000a54:	20000095 	.word	0x20000095
 8000a58:	08003b40 	.word	0x08003b40
 8000a5c:	08003b44 	.word	0x08003b44
 8000a60:	48000400 	.word	0x48000400
 8000a64:	20000004 	.word	0x20000004
 8000a68:	20000006 	.word	0x20000006
 8000a6c:	2000000a 	.word	0x2000000a
 8000a70:	08003b48 	.word	0x08003b48
 8000a74:	08003b4c 	.word	0x08003b4c
 8000a78:	08003b50 	.word	0x08003b50
 8000a7c:	20000008 	.word	0x20000008

08000a80 <ShiftREG>:
@brief Shifts data to a shift register.
@param uint8_t buffer[], the buffer of bits that represent a LED
@param uint8_t regs, the size of the amount of data (Number of registers)
*/
void ShiftREG(uint8_t buffer[], uint8_t regs)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET); // sets latch pin to low
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <ShiftREG+0x44>)
 8000a94:	f000 fc4c 	bl	8001330 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &buffer[0], regs, HAL_MAX_DELAY); 			 // transmit buffer with bits for light
 8000a98:	78fb      	ldrb	r3, [r7, #3]
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <ShiftREG+0x48>)
 8000aa4:	f002 f81f 	bl	8002ae6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_SET);	//latch pin goes high
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <ShiftREG+0x44>)
 8000ab0:	f000 fc3e 	bl	8001330 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f000 f96f 	bl	8000d98 <HAL_Delay>

}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	48000400 	.word	0x48000400
 8000ac8:	20000030 	.word	0x20000030

08000acc <toggleLEDWithFrequency>:
  @param uint16_t toggleFrequency Frequency of LED toggle in milliseconds.
  @param uint16_t duration_ms Duration of LED toggle in milliseconds.
  @param uint8_t blinkingLED Array representing the blinking LED configuration.
  @param uint8_t staticleds Array representing the static LED configuration.
 */
void toggleLEDWithFrequency(uint16_t toggleFrequency, uint16_t duration_ms,  uint8_t blinkingLED[3], uint8_t staticleds[3] ) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60ba      	str	r2, [r7, #8]
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	81fb      	strh	r3, [r7, #14]
 8000ada:	460b      	mov	r3, r1
 8000adc:	81bb      	strh	r3, [r7, #12]
	    uint8_t ledState = 0; // 0 for OFF, 1 for ON
 8000ade:	2300      	movs	r3, #0
 8000ae0:	77fb      	strb	r3, [r7, #31]
	    uint32_t startTime = HAL_GetTick();
 8000ae2:	f000 f94d 	bl	8000d80 <HAL_GetTick>
 8000ae6:	61b8      	str	r0, [r7, #24]
	    uint32_t currentTime;

	    while (1) {
	        currentTime = HAL_GetTick();
 8000ae8:	f000 f94a 	bl	8000d80 <HAL_GetTick>
 8000aec:	6178      	str	r0, [r7, #20]

	        // Check if the specified duration has elapsed
	        if ((currentTime - startTime) >= duration_ms) {
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	1ad2      	subs	r2, r2, r3
 8000af4:	89bb      	ldrh	r3, [r7, #12]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d217      	bcs.n	8000b2a <toggleLEDWithFrequency+0x5e>
	            // Duration has elapsed, exit the loop
	            break;
	        }

	        // Toggle the LED state
	        ledState = !ledState;
 8000afa:	7ffb      	ldrb	r3, [r7, #31]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	bf0c      	ite	eq
 8000b00:	2301      	moveq	r3, #1
 8000b02:	2300      	movne	r3, #0
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	77fb      	strb	r3, [r7, #31]

	        // Update the LED based on the state
	        if (ledState) {
 8000b08:	7ffb      	ldrb	r3, [r7, #31]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d004      	beq.n	8000b18 <toggleLEDWithFrequency+0x4c>
	            ShiftREG(blinkingLED, 3);  // Turn on the LED
 8000b0e:	2103      	movs	r1, #3
 8000b10:	68b8      	ldr	r0, [r7, #8]
 8000b12:	f7ff ffb5 	bl	8000a80 <ShiftREG>
 8000b16:	e003      	b.n	8000b20 <toggleLEDWithFrequency+0x54>
	        } else {

	            ShiftREG(staticleds, 3);
 8000b18:	2103      	movs	r1, #3
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ffb0 	bl	8000a80 <ShiftREG>
	        }

	        // Introduce a delay based on the toggle frequency
	        HAL_Delay(toggleFrequency);
 8000b20:	89fb      	ldrh	r3, [r7, #14]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f938 	bl	8000d98 <HAL_Delay>
	        currentTime = HAL_GetTick();
 8000b28:	e7de      	b.n	8000ae8 <toggleLEDWithFrequency+0x1c>
	            break;
 8000b2a:	bf00      	nop
	    }
	}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b3a:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <MX_USART2_UART_Init+0x5c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b78:	f002 fa8e 	bl	8003098 <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b82:	f7ff fdc1 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000098 	.word	0x20000098
 8000b90:	40004400 	.word	0x40004400

08000b94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0ac      	sub	sp, #176	; 0xb0
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2288      	movs	r2, #136	; 0x88
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f002 ff8a 	bl	8003ace <memset>
  if(uartHandle->Instance==USART2)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <HAL_UART_MspInit+0xb0>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d13b      	bne.n	8000c3c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 fa29 	bl	8002028 <HAL_RCCEx_PeriphCLKConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bdc:	f7ff fd94 	bl	8000708 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_UART_MspInit+0xb4>)
 8000be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be4:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <HAL_UART_MspInit+0xb4>)
 8000be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bea:	6593      	str	r3, [r2, #88]	; 0x58
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_UART_MspInit+0xb4>)
 8000bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <HAL_UART_MspInit+0xb4>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfc:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <HAL_UART_MspInit+0xb4>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <HAL_UART_MspInit+0xb4>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c10:	230c      	movs	r3, #12
 8000c12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c28:	2307      	movs	r3, #7
 8000c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c32:	4619      	mov	r1, r3
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c38:	f000 f9b8 	bl	8000fac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	37b0      	adds	r7, #176	; 0xb0
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40004400 	.word	0x40004400
 8000c48:	40021000 	.word	0x40021000

08000c4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c50:	f7ff fe4e 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	; (8000c8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <LoopForever+0xe>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	; (8000c98 <LoopForever+0x16>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f002 ff31 	bl	8003ae0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c7e:	f7ff fce3 	bl	8000648 <main>

08000c82 <LoopForever>:

LoopForever:
    b LoopForever
 8000c82:	e7fe      	b.n	8000c82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c90:	08003bac 	.word	0x08003bac
  ldr r2, =_sbss
 8000c94:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c98:	20000124 	.word	0x20000124

08000c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC1_2_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_Init+0x3c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <HAL_Init+0x3c>)
 8000cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f000 f944 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f000 f80f 	bl	8000ce0 <HAL_InitTick>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d002      	beq.n	8000cce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	e001      	b.n	8000cd2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cce:	f7ff fdc1 	bl	8000854 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40022000 	.word	0x40022000

08000ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <HAL_InitTick+0x6c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d023      	beq.n	8000d3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cf4:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <HAL_InitTick+0x70>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_InitTick+0x6c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f941 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10f      	bne.n	8000d36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d809      	bhi.n	8000d30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d24:	f000 f919 	bl	8000f5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_InitTick+0x74>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	e007      	b.n	8000d40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	e004      	b.n	8000d40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	73fb      	strb	r3, [r7, #15]
 8000d3a:	e001      	b.n	8000d40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000010 	.word	0x20000010
 8000d50:	20000000 	.word	0x20000000
 8000d54:	2000000c 	.word	0x2000000c

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000010 	.word	0x20000010
 8000d7c:	20000120 	.word	0x20000120

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000120 	.word	0x20000120

08000d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff ffee 	bl	8000d80 <HAL_GetTick>
 8000da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000db0:	d005      	beq.n	8000dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_Delay+0x44>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dbe:	bf00      	nop
 8000dc0:	f7ff ffde 	bl	8000d80 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8f7      	bhi.n	8000dc0 <HAL_Delay+0x28>
  {
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000010 	.word	0x20000010

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f24:	f7ff ff8e 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff47 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff5c 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff8e 	bl	8000e98 <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffb0 	bl	8000f00 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fba:	e17f      	b.n	80012bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 8171 	beq.w	80012b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d005      	beq.n	8000fec <HAL_GPIO_Init+0x40>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d130      	bne.n	800104e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001022:	2201      	movs	r2, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	091b      	lsrs	r3, r3, #4
 8001038:	f003 0201 	and.w	r2, r3, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b03      	cmp	r3, #3
 8001058:	d118      	bne.n	800108c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001060:	2201      	movs	r2, #1
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	08db      	lsrs	r3, r3, #3
 8001076:	f003 0201 	and.w	r2, r3, #1
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b03      	cmp	r3, #3
 8001096:	d017      	beq.n	80010c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d123      	bne.n	800111c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	08da      	lsrs	r2, r3, #3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3208      	adds	r2, #8
 80010dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	6939      	ldr	r1, [r7, #16]
 8001118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0203 	and.w	r2, r3, #3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80ac 	beq.w	80012b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	4b5f      	ldr	r3, [pc, #380]	; (80012dc <HAL_GPIO_Init+0x330>)
 8001160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001162:	4a5e      	ldr	r2, [pc, #376]	; (80012dc <HAL_GPIO_Init+0x330>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6613      	str	r3, [r2, #96]	; 0x60
 800116a:	4b5c      	ldr	r3, [pc, #368]	; (80012dc <HAL_GPIO_Init+0x330>)
 800116c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001176:	4a5a      	ldr	r2, [pc, #360]	; (80012e0 <HAL_GPIO_Init+0x334>)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011a0:	d025      	beq.n	80011ee <HAL_GPIO_Init+0x242>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4f      	ldr	r2, [pc, #316]	; (80012e4 <HAL_GPIO_Init+0x338>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d01f      	beq.n	80011ea <HAL_GPIO_Init+0x23e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4e      	ldr	r2, [pc, #312]	; (80012e8 <HAL_GPIO_Init+0x33c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d019      	beq.n	80011e6 <HAL_GPIO_Init+0x23a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4d      	ldr	r2, [pc, #308]	; (80012ec <HAL_GPIO_Init+0x340>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0x236>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4c      	ldr	r2, [pc, #304]	; (80012f0 <HAL_GPIO_Init+0x344>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00d      	beq.n	80011de <HAL_GPIO_Init+0x232>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4b      	ldr	r2, [pc, #300]	; (80012f4 <HAL_GPIO_Init+0x348>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x22e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4a      	ldr	r2, [pc, #296]	; (80012f8 <HAL_GPIO_Init+0x34c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_GPIO_Init+0x22a>
 80011d2:	2306      	movs	r3, #6
 80011d4:	e00c      	b.n	80011f0 <HAL_GPIO_Init+0x244>
 80011d6:	2307      	movs	r3, #7
 80011d8:	e00a      	b.n	80011f0 <HAL_GPIO_Init+0x244>
 80011da:	2305      	movs	r3, #5
 80011dc:	e008      	b.n	80011f0 <HAL_GPIO_Init+0x244>
 80011de:	2304      	movs	r3, #4
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x244>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e004      	b.n	80011f0 <HAL_GPIO_Init+0x244>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_Init+0x244>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x244>
 80011ee:	2300      	movs	r3, #0
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	f002 0203 	and.w	r2, r2, #3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4093      	lsls	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001200:	4937      	ldr	r1, [pc, #220]	; (80012e0 <HAL_GPIO_Init+0x334>)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800120e:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <HAL_GPIO_Init+0x350>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001232:	4a32      	ldr	r2, [pc, #200]	; (80012fc <HAL_GPIO_Init+0x350>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001238:	4b30      	ldr	r3, [pc, #192]	; (80012fc <HAL_GPIO_Init+0x350>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800125c:	4a27      	ldr	r2, [pc, #156]	; (80012fc <HAL_GPIO_Init+0x350>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001262:	4b26      	ldr	r3, [pc, #152]	; (80012fc <HAL_GPIO_Init+0x350>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001286:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <HAL_GPIO_Init+0x350>)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <HAL_GPIO_Init+0x350>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43db      	mvns	r3, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <HAL_GPIO_Init+0x350>)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa22 f303 	lsr.w	r3, r2, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f47f ae78 	bne.w	8000fbc <HAL_GPIO_Init+0x10>
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	371c      	adds	r7, #28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010000 	.word	0x40010000
 80012e4:	48000400 	.word	0x48000400
 80012e8:	48000800 	.word	0x48000800
 80012ec:	48000c00 	.word	0x48000c00
 80012f0:	48001000 	.word	0x48001000
 80012f4:	48001400 	.word	0x48001400
 80012f8:	48001800 	.word	0x48001800
 80012fc:	40010400 	.word	0x40010400

08001300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	887b      	ldrh	r3, [r7, #2]
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001318:	2301      	movs	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e001      	b.n	8001322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001322:	7bfb      	ldrb	r3, [r7, #15]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
 800133c:	4613      	mov	r3, r2
 800133e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001340:	787b      	ldrb	r3, [r7, #1]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800134c:	e002      	b.n	8001354 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <HAL_PWREx_GetVoltageRange+0x18>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40007000 	.word	0x40007000

0800137c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800138a:	d130      	bne.n	80013ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800138c:	4b23      	ldr	r3, [pc, #140]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001398:	d038      	beq.n	800140c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013a2:	4a1e      	ldr	r2, [pc, #120]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2232      	movs	r2, #50	; 0x32
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	0c9b      	lsrs	r3, r3, #18
 80013bc:	3301      	adds	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c0:	e002      	b.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d4:	d102      	bne.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f2      	bne.n	80013c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e8:	d110      	bne.n	800140c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e00f      	b.n	800140e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fa:	d007      	beq.n	800140c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001404:	4a05      	ldr	r2, [pc, #20]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40007000 	.word	0x40007000
 8001420:	20000000 	.word	0x20000000
 8001424:	431bde83 	.word	0x431bde83

08001428 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e3ca      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800143a:	4b97      	ldr	r3, [pc, #604]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001444:	4b94      	ldr	r3, [pc, #592]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 80e4 	beq.w	8001624 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d007      	beq.n	8001472 <HAL_RCC_OscConfig+0x4a>
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b0c      	cmp	r3, #12
 8001466:	f040 808b 	bne.w	8001580 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2b01      	cmp	r3, #1
 800146e:	f040 8087 	bne.w	8001580 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001472:	4b89      	ldr	r3, [pc, #548]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <HAL_RCC_OscConfig+0x62>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e3a2      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1a      	ldr	r2, [r3, #32]
 800148e:	4b82      	ldr	r3, [pc, #520]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	d004      	beq.n	80014a4 <HAL_RCC_OscConfig+0x7c>
 800149a:	4b7f      	ldr	r3, [pc, #508]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014a2:	e005      	b.n	80014b0 <HAL_RCC_OscConfig+0x88>
 80014a4:	4b7c      	ldr	r3, [pc, #496]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80014a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d223      	bcs.n	80014fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fd55 	bl	8001f68 <RCC_SetFlashLatencyFromMSIRange>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e383      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c8:	4b73      	ldr	r3, [pc, #460]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a72      	ldr	r2, [pc, #456]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80014ce:	f043 0308 	orr.w	r3, r3, #8
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b70      	ldr	r3, [pc, #448]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	496d      	ldr	r1, [pc, #436]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e6:	4b6c      	ldr	r3, [pc, #432]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	4968      	ldr	r1, [pc, #416]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
 80014fa:	e025      	b.n	8001548 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014fc:	4b66      	ldr	r3, [pc, #408]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a65      	ldr	r2, [pc, #404]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001502:	f043 0308 	orr.w	r3, r3, #8
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b63      	ldr	r3, [pc, #396]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4960      	ldr	r1, [pc, #384]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800151a:	4b5f      	ldr	r3, [pc, #380]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	495b      	ldr	r1, [pc, #364]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d109      	bne.n	8001548 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4618      	mov	r0, r3
 800153a:	f000 fd15 	bl	8001f68 <RCC_SetFlashLatencyFromMSIRange>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e343      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001548:	f000 fc4a 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 800154c:	4602      	mov	r2, r0
 800154e:	4b52      	ldr	r3, [pc, #328]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	4950      	ldr	r1, [pc, #320]	; (800169c <HAL_RCC_OscConfig+0x274>)
 800155a:	5ccb      	ldrb	r3, [r1, r3]
 800155c:	f003 031f 	and.w	r3, r3, #31
 8001560:	fa22 f303 	lsr.w	r3, r2, r3
 8001564:	4a4e      	ldr	r2, [pc, #312]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001566:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001568:	4b4e      	ldr	r3, [pc, #312]	; (80016a4 <HAL_RCC_OscConfig+0x27c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fbb7 	bl	8000ce0 <HAL_InitTick>
 8001572:	4603      	mov	r3, r0
 8001574:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d052      	beq.n	8001622 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	e327      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d032      	beq.n	80015ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001588:	4b43      	ldr	r3, [pc, #268]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a42      	ldr	r2, [pc, #264]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001594:	f7ff fbf4 	bl	8000d80 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800159c:	f7ff fbf0 	bl	8000d80 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e310      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ae:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ba:	4b37      	ldr	r3, [pc, #220]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a36      	ldr	r2, [pc, #216]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4931      	ldr	r1, [pc, #196]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d8:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	492c      	ldr	r1, [pc, #176]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
 80015ec:	e01a      	b.n	8001624 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a29      	ldr	r2, [pc, #164]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015fa:	f7ff fbc1 	bl	8000d80 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001602:	f7ff fbbd 	bl	8000d80 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e2dd      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f0      	bne.n	8001602 <HAL_RCC_OscConfig+0x1da>
 8001620:	e000      	b.n	8001624 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001622:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b00      	cmp	r3, #0
 800162e:	d074      	beq.n	800171a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b08      	cmp	r3, #8
 8001634:	d005      	beq.n	8001642 <HAL_RCC_OscConfig+0x21a>
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b0c      	cmp	r3, #12
 800163a:	d10e      	bne.n	800165a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d10b      	bne.n	800165a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d064      	beq.n	8001718 <HAL_RCC_OscConfig+0x2f0>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d160      	bne.n	8001718 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e2ba      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x24a>
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800166a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	e026      	b.n	80016c0 <HAL_RCC_OscConfig+0x298>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800167a:	d115      	bne.n	80016a8 <HAL_RCC_OscConfig+0x280>
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a05      	ldr	r2, [pc, #20]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001682:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a02      	ldr	r2, [pc, #8]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800168e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	e014      	b.n	80016c0 <HAL_RCC_OscConfig+0x298>
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	08003b54 	.word	0x08003b54
 80016a0:	20000000 	.word	0x20000000
 80016a4:	2000000c 	.word	0x2000000c
 80016a8:	4ba0      	ldr	r3, [pc, #640]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a9f      	ldr	r2, [pc, #636]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80016ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b9d      	ldr	r3, [pc, #628]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a9c      	ldr	r2, [pc, #624]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80016ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d013      	beq.n	80016f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff fb5a 	bl	8000d80 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d0:	f7ff fb56 	bl	8000d80 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	; 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e276      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e2:	4b92      	ldr	r3, [pc, #584]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x2a8>
 80016ee:	e014      	b.n	800171a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fb46 	bl	8000d80 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fb42 	bl	8000d80 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e262      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800170a:	4b88      	ldr	r3, [pc, #544]	; (800192c <HAL_RCC_OscConfig+0x504>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2d0>
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d060      	beq.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d005      	beq.n	8001738 <HAL_RCC_OscConfig+0x310>
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	2b0c      	cmp	r3, #12
 8001730:	d119      	bne.n	8001766 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d116      	bne.n	8001766 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001738:	4b7c      	ldr	r3, [pc, #496]	; (800192c <HAL_RCC_OscConfig+0x504>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_OscConfig+0x328>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e23f      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001750:	4b76      	ldr	r3, [pc, #472]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	061b      	lsls	r3, r3, #24
 800175e:	4973      	ldr	r1, [pc, #460]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001764:	e040      	b.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d023      	beq.n	80017b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800176e:	4b6f      	ldr	r3, [pc, #444]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a6e      	ldr	r2, [pc, #440]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177a:	f7ff fb01 	bl	8000d80 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001782:	f7ff fafd 	bl	8000d80 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e21d      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001794:	4b65      	ldr	r3, [pc, #404]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a0:	4b62      	ldr	r3, [pc, #392]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	061b      	lsls	r3, r3, #24
 80017ae:	495f      	ldr	r1, [pc, #380]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
 80017b4:	e018      	b.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b6:	4b5d      	ldr	r3, [pc, #372]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a5c      	ldr	r2, [pc, #368]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80017bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff fadd 	bl	8000d80 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ca:	f7ff fad9 	bl	8000d80 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e1f9      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017dc:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d03c      	beq.n	800186e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d01c      	beq.n	8001836 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fc:	4b4b      	ldr	r3, [pc, #300]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80017fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001802:	4a4a      	ldr	r2, [pc, #296]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff fab8 	bl	8000d80 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff fab4 	bl	8000d80 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e1d4      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001826:	4b41      	ldr	r3, [pc, #260]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0ef      	beq.n	8001814 <HAL_RCC_OscConfig+0x3ec>
 8001834:	e01b      	b.n	800186e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001836:	4b3d      	ldr	r3, [pc, #244]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183c:	4a3b      	ldr	r2, [pc, #236]	; (800192c <HAL_RCC_OscConfig+0x504>)
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001846:	f7ff fa9b 	bl	8000d80 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184e:	f7ff fa97 	bl	8000d80 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e1b7      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001860:	4b32      	ldr	r3, [pc, #200]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1ef      	bne.n	800184e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 80a6 	beq.w	80019c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187c:	2300      	movs	r3, #0
 800187e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001880:	4b2a      	ldr	r3, [pc, #168]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10d      	bne.n	80018a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188c:	4b27      	ldr	r3, [pc, #156]	; (800192c <HAL_RCC_OscConfig+0x504>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	4a26      	ldr	r2, [pc, #152]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001896:	6593      	str	r3, [r2, #88]	; 0x58
 8001898:	4b24      	ldr	r3, [pc, #144]	; (800192c <HAL_RCC_OscConfig+0x504>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a4:	2301      	movs	r3, #1
 80018a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <HAL_RCC_OscConfig+0x508>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d118      	bne.n	80018e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <HAL_RCC_OscConfig+0x508>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1d      	ldr	r2, [pc, #116]	; (8001930 <HAL_RCC_OscConfig+0x508>)
 80018ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c0:	f7ff fa5e 	bl	8000d80 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c8:	f7ff fa5a 	bl	8000d80 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e17a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_RCC_OscConfig+0x508>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d108      	bne.n	8001900 <HAL_RCC_OscConfig+0x4d8>
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80018f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018fe:	e029      	b.n	8001954 <HAL_RCC_OscConfig+0x52c>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b05      	cmp	r3, #5
 8001906:	d115      	bne.n	8001934 <HAL_RCC_OscConfig+0x50c>
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_RCC_OscConfig+0x504>)
 800190a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <HAL_RCC_OscConfig+0x504>)
 800191a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191e:	4a03      	ldr	r2, [pc, #12]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001928:	e014      	b.n	8001954 <HAL_RCC_OscConfig+0x52c>
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	40007000 	.word	0x40007000
 8001934:	4b9c      	ldr	r3, [pc, #624]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193a:	4a9b      	ldr	r2, [pc, #620]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001944:	4b98      	ldr	r3, [pc, #608]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194a:	4a97      	ldr	r2, [pc, #604]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 800194c:	f023 0304 	bic.w	r3, r3, #4
 8001950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d016      	beq.n	800198a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195c:	f7ff fa10 	bl	8000d80 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001962:	e00a      	b.n	800197a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001964:	f7ff fa0c 	bl	8000d80 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e12a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800197a:	4b8b      	ldr	r3, [pc, #556]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 800197c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0ed      	beq.n	8001964 <HAL_RCC_OscConfig+0x53c>
 8001988:	e015      	b.n	80019b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198a:	f7ff f9f9 	bl	8000d80 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001990:	e00a      	b.n	80019a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001992:	f7ff f9f5 	bl	8000d80 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e113      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a8:	4b7f      	ldr	r3, [pc, #508]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1ed      	bne.n	8001992 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019b6:	7ffb      	ldrb	r3, [r7, #31]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d105      	bne.n	80019c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019bc:	4b7a      	ldr	r3, [pc, #488]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	4a79      	ldr	r2, [pc, #484]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 80019c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80fe 	beq.w	8001bce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	f040 80d0 	bne.w	8001b7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019dc:	4b72      	ldr	r3, [pc, #456]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f003 0203 	and.w	r2, r3, #3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d130      	bne.n	8001a52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	3b01      	subs	r3, #1
 80019fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d127      	bne.n	8001a52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d11f      	bne.n	8001a52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a1c:	2a07      	cmp	r2, #7
 8001a1e:	bf14      	ite	ne
 8001a20:	2201      	movne	r2, #1
 8001a22:	2200      	moveq	r2, #0
 8001a24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d113      	bne.n	8001a52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a34:	085b      	lsrs	r3, r3, #1
 8001a36:	3b01      	subs	r3, #1
 8001a38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d109      	bne.n	8001a52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	085b      	lsrs	r3, r3, #1
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d06e      	beq.n	8001b30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2b0c      	cmp	r3, #12
 8001a56:	d069      	beq.n	8001b2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a58:	4b53      	ldr	r3, [pc, #332]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d105      	bne.n	8001a70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a64:	4b50      	ldr	r3, [pc, #320]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0ad      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a74:	4b4c      	ldr	r3, [pc, #304]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a4b      	ldr	r2, [pc, #300]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a80:	f7ff f97e 	bl	8000d80 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a88:	f7ff f97a 	bl	8000d80 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e09a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9a:	4b43      	ldr	r3, [pc, #268]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa6:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	4b40      	ldr	r3, [pc, #256]	; (8001bac <HAL_RCC_OscConfig+0x784>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ab6:	3a01      	subs	r2, #1
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	4311      	orrs	r1, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ac0:	0212      	lsls	r2, r2, #8
 8001ac2:	4311      	orrs	r1, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ac8:	0852      	lsrs	r2, r2, #1
 8001aca:	3a01      	subs	r2, #1
 8001acc:	0552      	lsls	r2, r2, #21
 8001ace:	4311      	orrs	r1, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ad4:	0852      	lsrs	r2, r2, #1
 8001ad6:	3a01      	subs	r2, #1
 8001ad8:	0652      	lsls	r2, r2, #25
 8001ada:	4311      	orrs	r1, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ae0:	0912      	lsrs	r2, r2, #4
 8001ae2:	0452      	lsls	r2, r2, #17
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	4930      	ldr	r1, [pc, #192]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001aec:	4b2e      	ldr	r3, [pc, #184]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a2d      	ldr	r2, [pc, #180]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001af8:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4a2a      	ldr	r2, [pc, #168]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b04:	f7ff f93c 	bl	8000d80 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff f938 	bl	8000d80 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e058      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1e:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b2a:	e050      	b.n	8001bce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e04f      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b30:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d148      	bne.n	8001bce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a19      	ldr	r2, [pc, #100]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b54:	f7ff f914 	bl	8000d80 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5c:	f7ff f910 	bl	8000d80 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e030      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x734>
 8001b7a:	e028      	b.n	8001bce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d023      	beq.n	8001bca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8e:	f7ff f8f7 	bl	8000d80 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b94:	e00c      	b.n	8001bb0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b96:	f7ff f8f3 	bl	8000d80 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d905      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e013      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_OscConfig+0x7b0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ec      	bne.n	8001b96 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_RCC_OscConfig+0x7b0>)
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4905      	ldr	r1, [pc, #20]	; (8001bd8 <HAL_RCC_OscConfig+0x7b0>)
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_RCC_OscConfig+0x7b4>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60cb      	str	r3, [r1, #12]
 8001bc8:	e001      	b.n	8001bce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	feeefffc 	.word	0xfeeefffc

08001be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0e7      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b75      	ldr	r3, [pc, #468]	; (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d910      	bls.n	8001c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b72      	ldr	r3, [pc, #456]	; (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 0207 	bic.w	r2, r3, #7
 8001c0a:	4970      	ldr	r1, [pc, #448]	; (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b6e      	ldr	r3, [pc, #440]	; (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0cf      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d010      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	4b66      	ldr	r3, [pc, #408]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d908      	bls.n	8001c52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c40:	4b63      	ldr	r3, [pc, #396]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4960      	ldr	r1, [pc, #384]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d04c      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c66:	4b5a      	ldr	r3, [pc, #360]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d121      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e0a6      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7e:	4b54      	ldr	r3, [pc, #336]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d115      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e09a      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c96:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e08e      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e086      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cb6:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f023 0203 	bic.w	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4943      	ldr	r1, [pc, #268]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc8:	f7ff f85a 	bl	8000d80 <HAL_GetTick>
 8001ccc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd0:	f7ff f856 	bl	8000d80 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e06e      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 020c 	and.w	r2, r3, #12
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d1eb      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d010      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d208      	bcs.n	8001d26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d14:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	492b      	ldr	r1, [pc, #172]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d26:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d210      	bcs.n	8001d56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 0207 	bic.w	r2, r3, #7
 8001d3c:	4923      	ldr	r1, [pc, #140]	; (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d44:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e036      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d008      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	4918      	ldr	r1, [pc, #96]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d009      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4910      	ldr	r1, [pc, #64]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d94:	f000 f824 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	490b      	ldr	r1, [pc, #44]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f4>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
 8001db0:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001db2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1fc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe ff91 	bl	8000ce0 <HAL_InitTick>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dc2:	7afb      	ldrb	r3, [r7, #11]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	08003b54 	.word	0x08003b54
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	2000000c 	.word	0x2000000c

08001de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df8:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x34>
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d121      	bne.n	8001e52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d11e      	bne.n	8001e52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e14:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d107      	bne.n	8001e30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e20:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	e005      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e30:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e3c:	4a2b      	ldr	r2, [pc, #172]	; (8001eec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10d      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d102      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e5a:	61bb      	str	r3, [r7, #24]
 8001e5c:	e004      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e64:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	d134      	bne.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d003      	beq.n	8001e86 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d003      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0xac>
 8001e84:	e005      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e88:	617b      	str	r3, [r7, #20]
      break;
 8001e8a:	e005      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e8c:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e8e:	617b      	str	r3, [r7, #20]
      break;
 8001e90:	e002      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	617b      	str	r3, [r7, #20]
      break;
 8001e96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e98:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	fb03 f202 	mul.w	r2, r3, r2
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	0e5b      	lsrs	r3, r3, #25
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ed8:	69bb      	ldr	r3, [r7, #24]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08003b6c 	.word	0x08003b6c
 8001ef0:	00f42400 	.word	0x00f42400
 8001ef4:	007a1200 	.word	0x007a1200

08001ef8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000000 	.word	0x20000000

08001f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f14:	f7ff fff0 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	0a1b      	lsrs	r3, r3, #8
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	4904      	ldr	r1, [pc, #16]	; (8001f38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	08003b64 	.word	0x08003b64

08001f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f40:	f7ff ffda 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	0adb      	lsrs	r3, r3, #11
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	4904      	ldr	r1, [pc, #16]	; (8001f64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f52:	5ccb      	ldrb	r3, [r1, r3]
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	08003b64 	.word	0x08003b64

08001f68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f74:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f80:	f7ff f9ee 	bl	8001360 <HAL_PWREx_GetVoltageRange>
 8001f84:	6178      	str	r0, [r7, #20]
 8001f86:	e014      	b.n	8001fb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	4a24      	ldr	r2, [pc, #144]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f92:	6593      	str	r3, [r2, #88]	; 0x58
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fa0:	f7ff f9de 	bl	8001360 <HAL_PWREx_GetVoltageRange>
 8001fa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb8:	d10b      	bne.n	8001fd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	d919      	bls.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2ba0      	cmp	r3, #160	; 0xa0
 8001fc4:	d902      	bls.n	8001fcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	e013      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fcc:	2301      	movs	r3, #1
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	e010      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b80      	cmp	r3, #128	; 0x80
 8001fd6:	d902      	bls.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fd8:	2303      	movs	r3, #3
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e00a      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b80      	cmp	r3, #128	; 0x80
 8001fe2:	d102      	bne.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	e004      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b70      	cmp	r3, #112	; 0x70
 8001fee:	d101      	bne.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 0207 	bic.w	r2, r3, #7
 8001ffc:	4909      	ldr	r1, [pc, #36]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	40022000 	.word	0x40022000

08002028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002030:	2300      	movs	r3, #0
 8002032:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002034:	2300      	movs	r3, #0
 8002036:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002040:	2b00      	cmp	r3, #0
 8002042:	d041      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002048:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800204c:	d02a      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800204e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002052:	d824      	bhi.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002058:	d008      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800205a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800205e:	d81e      	bhi.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002068:	d010      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800206a:	e018      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800206c:	4b86      	ldr	r3, [pc, #536]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4a85      	ldr	r2, [pc, #532]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002076:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002078:	e015      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fabb 	bl	80025fc <RCCEx_PLLSAI1_Config>
 8002086:	4603      	mov	r3, r0
 8002088:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800208a:	e00c      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3320      	adds	r3, #32
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fba6 	bl	80027e4 <RCCEx_PLLSAI2_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800209c:	e003      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	74fb      	strb	r3, [r7, #19]
      break;
 80020a2:	e000      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020a6:	7cfb      	ldrb	r3, [r7, #19]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10b      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020ac:	4b76      	ldr	r3, [pc, #472]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020ba:	4973      	ldr	r1, [pc, #460]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020c2:	e001      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d041      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020dc:	d02a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020e2:	d824      	bhi.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020e8:	d008      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020ee:	d81e      	bhi.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f8:	d010      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020fa:	e018      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020fc:	4b62      	ldr	r3, [pc, #392]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a61      	ldr	r2, [pc, #388]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002106:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002108:	e015      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3304      	adds	r3, #4
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fa73 	bl	80025fc <RCCEx_PLLSAI1_Config>
 8002116:	4603      	mov	r3, r0
 8002118:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800211a:	e00c      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3320      	adds	r3, #32
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fb5e 	bl	80027e4 <RCCEx_PLLSAI2_Config>
 8002128:	4603      	mov	r3, r0
 800212a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800212c:	e003      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	74fb      	strb	r3, [r7, #19]
      break;
 8002132:	e000      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002136:	7cfb      	ldrb	r3, [r7, #19]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10b      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800213c:	4b52      	ldr	r3, [pc, #328]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800214a:	494f      	ldr	r1, [pc, #316]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002152:	e001      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80a0 	beq.w	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800216a:	4b47      	ldr	r3, [pc, #284]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800217a:	2300      	movs	r3, #0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00d      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002180:	4b41      	ldr	r3, [pc, #260]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	4a40      	ldr	r2, [pc, #256]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218a:	6593      	str	r3, [r2, #88]	; 0x58
 800218c:	4b3e      	ldr	r3, [pc, #248]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002198:	2301      	movs	r3, #1
 800219a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800219c:	4b3b      	ldr	r3, [pc, #236]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a3a      	ldr	r2, [pc, #232]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021a8:	f7fe fdea 	bl	8000d80 <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ae:	e009      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b0:	f7fe fde6 	bl	8000d80 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d902      	bls.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	74fb      	strb	r3, [r7, #19]
        break;
 80021c2:	e005      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021c4:	4b31      	ldr	r3, [pc, #196]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ef      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d15c      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d01f      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d019      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021f4:	4b24      	ldr	r3, [pc, #144]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002200:	4b21      	ldr	r3, [pc, #132]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002206:	4a20      	ldr	r2, [pc, #128]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002216:	4a1c      	ldr	r2, [pc, #112]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002220:	4a19      	ldr	r2, [pc, #100]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d016      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7fe fda5 	bl	8000d80 <HAL_GetTick>
 8002236:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002238:	e00b      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe fda1 	bl	8000d80 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d902      	bls.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	74fb      	strb	r3, [r7, #19]
            break;
 8002250:	e006      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ec      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10c      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002276:	4904      	ldr	r1, [pc, #16]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800227e:	e009      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	74bb      	strb	r3, [r7, #18]
 8002284:	e006      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002294:	7c7b      	ldrb	r3, [r7, #17]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d105      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4b9e      	ldr	r3, [pc, #632]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	4a9d      	ldr	r2, [pc, #628]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022b2:	4b98      	ldr	r3, [pc, #608]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b8:	f023 0203 	bic.w	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c0:	4994      	ldr	r1, [pc, #592]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022d4:	4b8f      	ldr	r3, [pc, #572]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	f023 020c 	bic.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e2:	498c      	ldr	r1, [pc, #560]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022f6:	4b87      	ldr	r3, [pc, #540]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	4983      	ldr	r1, [pc, #524]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002318:	4b7e      	ldr	r3, [pc, #504]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	497b      	ldr	r1, [pc, #492]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800233a:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002348:	4972      	ldr	r1, [pc, #456]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800235c:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	496a      	ldr	r1, [pc, #424]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800237e:	4b65      	ldr	r3, [pc, #404]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002384:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	4961      	ldr	r1, [pc, #388]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023a0:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ae:	4959      	ldr	r1, [pc, #356]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c2:	4b54      	ldr	r3, [pc, #336]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d0:	4950      	ldr	r1, [pc, #320]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023e4:	4b4b      	ldr	r3, [pc, #300]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	4948      	ldr	r1, [pc, #288]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002406:	4b43      	ldr	r3, [pc, #268]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	493f      	ldr	r1, [pc, #252]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d028      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002428:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002436:	4937      	ldr	r1, [pc, #220]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002446:	d106      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002448:	4b32      	ldr	r3, [pc, #200]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4a31      	ldr	r2, [pc, #196]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002452:	60d3      	str	r3, [r2, #12]
 8002454:	e011      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800245a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800245e:	d10c      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3304      	adds	r3, #4
 8002464:	2101      	movs	r1, #1
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f8c8 	bl	80025fc <RCCEx_PLLSAI1_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d028      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002486:	4b23      	ldr	r3, [pc, #140]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	491f      	ldr	r1, [pc, #124]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024a4:	d106      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024a6:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	4a1a      	ldr	r2, [pc, #104]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b0:	60d3      	str	r3, [r2, #12]
 80024b2:	e011      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2101      	movs	r1, #1
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 f899 	bl	80025fc <RCCEx_PLLSAI1_Config>
 80024ca:	4603      	mov	r3, r0
 80024cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ce:	7cfb      	ldrb	r3, [r7, #19]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d02b      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f2:	4908      	ldr	r1, [pc, #32]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002502:	d109      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a02      	ldr	r2, [pc, #8]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800250e:	60d3      	str	r3, [r2, #12]
 8002510:	e014      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800251c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002520:	d10c      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3304      	adds	r3, #4
 8002526:	2101      	movs	r1, #1
 8002528:	4618      	mov	r0, r3
 800252a:	f000 f867 	bl	80025fc <RCCEx_PLLSAI1_Config>
 800252e:	4603      	mov	r3, r0
 8002530:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d02f      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002556:	4928      	ldr	r1, [pc, #160]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002566:	d10d      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3304      	adds	r3, #4
 800256c:	2102      	movs	r1, #2
 800256e:	4618      	mov	r0, r3
 8002570:	f000 f844 	bl	80025fc <RCCEx_PLLSAI1_Config>
 8002574:	4603      	mov	r3, r0
 8002576:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d014      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800257e:	7cfb      	ldrb	r3, [r7, #19]
 8002580:	74bb      	strb	r3, [r7, #18]
 8002582:	e011      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3320      	adds	r3, #32
 8002592:	2102      	movs	r1, #2
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f925 	bl	80027e4 <RCCEx_PLLSAI2_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025c2:	490d      	ldr	r1, [pc, #52]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025e6:	4904      	ldr	r1, [pc, #16]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000

080025fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800260a:	4b75      	ldr	r3, [pc, #468]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d018      	beq.n	8002648 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002616:	4b72      	ldr	r3, [pc, #456]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0203 	and.w	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d10d      	bne.n	8002642 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
       ||
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800262e:	4b6c      	ldr	r3, [pc, #432]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
       ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d047      	beq.n	80026d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	e044      	b.n	80026d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d018      	beq.n	8002682 <RCCEx_PLLSAI1_Config+0x86>
 8002650:	2b03      	cmp	r3, #3
 8002652:	d825      	bhi.n	80026a0 <RCCEx_PLLSAI1_Config+0xa4>
 8002654:	2b01      	cmp	r3, #1
 8002656:	d002      	beq.n	800265e <RCCEx_PLLSAI1_Config+0x62>
 8002658:	2b02      	cmp	r3, #2
 800265a:	d009      	beq.n	8002670 <RCCEx_PLLSAI1_Config+0x74>
 800265c:	e020      	b.n	80026a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800265e:	4b60      	ldr	r3, [pc, #384]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d11d      	bne.n	80026a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800266e:	e01a      	b.n	80026a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002670:	4b5b      	ldr	r3, [pc, #364]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002678:	2b00      	cmp	r3, #0
 800267a:	d116      	bne.n	80026aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002680:	e013      	b.n	80026aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002682:	4b57      	ldr	r3, [pc, #348]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10f      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800268e:	4b54      	ldr	r3, [pc, #336]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800269e:	e006      	b.n	80026ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
      break;
 80026a4:	e004      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026a6:	bf00      	nop
 80026a8:	e002      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026aa:	bf00      	nop
 80026ac:	e000      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10d      	bne.n	80026d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026b6:	4b4a      	ldr	r3, [pc, #296]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6819      	ldr	r1, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	430b      	orrs	r3, r1
 80026cc:	4944      	ldr	r1, [pc, #272]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d17d      	bne.n	80027d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026d8:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a40      	ldr	r2, [pc, #256]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e4:	f7fe fb4c 	bl	8000d80 <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026ea:	e009      	b.n	8002700 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026ec:	f7fe fb48 	bl	8000d80 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d902      	bls.n	8002700 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	73fb      	strb	r3, [r7, #15]
        break;
 80026fe:	e005      	b.n	800270c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002700:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ef      	bne.n	80026ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d160      	bne.n	80027d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d111      	bne.n	800273c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002718:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6892      	ldr	r2, [r2, #8]
 8002728:	0211      	lsls	r1, r2, #8
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68d2      	ldr	r2, [r2, #12]
 800272e:	0912      	lsrs	r2, r2, #4
 8002730:	0452      	lsls	r2, r2, #17
 8002732:	430a      	orrs	r2, r1
 8002734:	492a      	ldr	r1, [pc, #168]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	610b      	str	r3, [r1, #16]
 800273a:	e027      	b.n	800278c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d112      	bne.n	8002768 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002742:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800274a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6892      	ldr	r2, [r2, #8]
 8002752:	0211      	lsls	r1, r2, #8
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6912      	ldr	r2, [r2, #16]
 8002758:	0852      	lsrs	r2, r2, #1
 800275a:	3a01      	subs	r2, #1
 800275c:	0552      	lsls	r2, r2, #21
 800275e:	430a      	orrs	r2, r1
 8002760:	491f      	ldr	r1, [pc, #124]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	610b      	str	r3, [r1, #16]
 8002766:	e011      	b.n	800278c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002770:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6892      	ldr	r2, [r2, #8]
 8002778:	0211      	lsls	r1, r2, #8
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6952      	ldr	r2, [r2, #20]
 800277e:	0852      	lsrs	r2, r2, #1
 8002780:	3a01      	subs	r2, #1
 8002782:	0652      	lsls	r2, r2, #25
 8002784:	430a      	orrs	r2, r1
 8002786:	4916      	ldr	r1, [pc, #88]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002792:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002796:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7fe faf2 	bl	8000d80 <HAL_GetTick>
 800279c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800279e:	e009      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027a0:	f7fe faee 	bl	8000d80 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d902      	bls.n	80027b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	73fb      	strb	r3, [r7, #15]
          break;
 80027b2:	e005      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0ef      	beq.n	80027a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	4904      	ldr	r1, [pc, #16]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000

080027e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027f2:	4b6a      	ldr	r3, [pc, #424]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d018      	beq.n	8002830 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027fe:	4b67      	ldr	r3, [pc, #412]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0203 	and.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d10d      	bne.n	800282a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
       ||
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002816:	4b61      	ldr	r3, [pc, #388]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
       ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d047      	beq.n	80028ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
 800282e:	e044      	b.n	80028ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d018      	beq.n	800286a <RCCEx_PLLSAI2_Config+0x86>
 8002838:	2b03      	cmp	r3, #3
 800283a:	d825      	bhi.n	8002888 <RCCEx_PLLSAI2_Config+0xa4>
 800283c:	2b01      	cmp	r3, #1
 800283e:	d002      	beq.n	8002846 <RCCEx_PLLSAI2_Config+0x62>
 8002840:	2b02      	cmp	r3, #2
 8002842:	d009      	beq.n	8002858 <RCCEx_PLLSAI2_Config+0x74>
 8002844:	e020      	b.n	8002888 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002846:	4b55      	ldr	r3, [pc, #340]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d11d      	bne.n	800288e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002856:	e01a      	b.n	800288e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002858:	4b50      	ldr	r3, [pc, #320]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	2b00      	cmp	r3, #0
 8002862:	d116      	bne.n	8002892 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002868:	e013      	b.n	8002892 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800286a:	4b4c      	ldr	r3, [pc, #304]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10f      	bne.n	8002896 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002876:	4b49      	ldr	r3, [pc, #292]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002886:	e006      	b.n	8002896 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      break;
 800288c:	e004      	b.n	8002898 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800288e:	bf00      	nop
 8002890:	e002      	b.n	8002898 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002892:	bf00      	nop
 8002894:	e000      	b.n	8002898 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002896:	bf00      	nop
    }

    if(status == HAL_OK)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10d      	bne.n	80028ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800289e:	4b3f      	ldr	r3, [pc, #252]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6819      	ldr	r1, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	430b      	orrs	r3, r1
 80028b4:	4939      	ldr	r1, [pc, #228]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d167      	bne.n	8002990 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028c0:	4b36      	ldr	r3, [pc, #216]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a35      	ldr	r2, [pc, #212]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028cc:	f7fe fa58 	bl	8000d80 <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028d2:	e009      	b.n	80028e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028d4:	f7fe fa54 	bl	8000d80 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d902      	bls.n	80028e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	73fb      	strb	r3, [r7, #15]
        break;
 80028e6:	e005      	b.n	80028f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028e8:	4b2c      	ldr	r3, [pc, #176]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1ef      	bne.n	80028d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d14a      	bne.n	8002990 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d111      	bne.n	8002924 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002900:	4b26      	ldr	r3, [pc, #152]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6892      	ldr	r2, [r2, #8]
 8002910:	0211      	lsls	r1, r2, #8
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68d2      	ldr	r2, [r2, #12]
 8002916:	0912      	lsrs	r2, r2, #4
 8002918:	0452      	lsls	r2, r2, #17
 800291a:	430a      	orrs	r2, r1
 800291c:	491f      	ldr	r1, [pc, #124]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	614b      	str	r3, [r1, #20]
 8002922:	e011      	b.n	8002948 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800292c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6892      	ldr	r2, [r2, #8]
 8002934:	0211      	lsls	r1, r2, #8
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6912      	ldr	r2, [r2, #16]
 800293a:	0852      	lsrs	r2, r2, #1
 800293c:	3a01      	subs	r2, #1
 800293e:	0652      	lsls	r2, r2, #25
 8002940:	430a      	orrs	r2, r1
 8002942:	4916      	ldr	r1, [pc, #88]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002944:	4313      	orrs	r3, r2
 8002946:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a13      	ldr	r2, [pc, #76]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800294e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002952:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7fe fa14 	bl	8000d80 <HAL_GetTick>
 8002958:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800295a:	e009      	b.n	8002970 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800295c:	f7fe fa10 	bl	8000d80 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d902      	bls.n	8002970 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	73fb      	strb	r3, [r7, #15]
          break;
 800296e:	e005      	b.n	800297c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ef      	beq.n	800295c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4904      	ldr	r1, [pc, #16]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800298c:	4313      	orrs	r3, r2
 800298e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e095      	b.n	8002ade <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d108      	bne.n	80029cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029c2:	d009      	beq.n	80029d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	61da      	str	r2, [r3, #28]
 80029ca:	e005      	b.n	80029d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fd fecc 	bl	8000790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a18:	d902      	bls.n	8002a20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e002      	b.n	8002a26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a2e:	d007      	beq.n	8002a40 <HAL_SPI_Init+0xa0>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a38:	d002      	beq.n	8002a40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a82:	ea42 0103 	orr.w	r1, r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	0c1b      	lsrs	r3, r3, #16
 8002a9c:	f003 0204 	and.w	r2, r3, #4
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002abc:	ea42 0103 	orr.w	r1, r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b088      	sub	sp, #32
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	4613      	mov	r3, r2
 8002af4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_SPI_Transmit+0x22>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e15f      	b.n	8002dc8 <HAL_SPI_Transmit+0x2e2>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b10:	f7fe f936 	bl	8000d80 <HAL_GetTick>
 8002b14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d002      	beq.n	8002b2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b26:	2302      	movs	r3, #2
 8002b28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b2a:	e148      	b.n	8002dbe <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_SPI_Transmit+0x52>
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b3c:	e13f      	b.n	8002dbe <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2203      	movs	r2, #3
 8002b42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	88fa      	ldrh	r2, [r7, #6]
 8002b5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b88:	d10f      	bne.n	8002baa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ba8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb4:	2b40      	cmp	r3, #64	; 0x40
 8002bb6:	d007      	beq.n	8002bc8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bd0:	d94f      	bls.n	8002c72 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <HAL_SPI_Transmit+0xfa>
 8002bda:	8afb      	ldrh	r3, [r7, #22]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d142      	bne.n	8002c66 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	881a      	ldrh	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf0:	1c9a      	adds	r2, r3, #2
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c04:	e02f      	b.n	8002c66 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d112      	bne.n	8002c3a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	881a      	ldrh	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	1c9a      	adds	r2, r3, #2
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c38:	e015      	b.n	8002c66 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c3a:	f7fe f8a1 	bl	8000d80 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d803      	bhi.n	8002c52 <HAL_SPI_Transmit+0x16c>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c50:	d102      	bne.n	8002c58 <HAL_SPI_Transmit+0x172>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d106      	bne.n	8002c66 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002c64:	e0ab      	b.n	8002dbe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1ca      	bne.n	8002c06 <HAL_SPI_Transmit+0x120>
 8002c70:	e080      	b.n	8002d74 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_SPI_Transmit+0x19a>
 8002c7a:	8afb      	ldrh	r3, [r7, #22]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d174      	bne.n	8002d6a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d912      	bls.n	8002cb0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8e:	881a      	ldrh	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	1c9a      	adds	r2, r3, #2
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b02      	subs	r3, #2
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cae:	e05c      	b.n	8002d6a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	330c      	adds	r3, #12
 8002cba:	7812      	ldrb	r2, [r2, #0]
 8002cbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002cd6:	e048      	b.n	8002d6a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d12b      	bne.n	8002d3e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d912      	bls.n	8002d16 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	881a      	ldrh	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	1c9a      	adds	r2, r3, #2
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b02      	subs	r3, #2
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d14:	e029      	b.n	8002d6a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	330c      	adds	r3, #12
 8002d20:	7812      	ldrb	r2, [r2, #0]
 8002d22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d3c:	e015      	b.n	8002d6a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d3e:	f7fe f81f 	bl	8000d80 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d803      	bhi.n	8002d56 <HAL_SPI_Transmit+0x270>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d54:	d102      	bne.n	8002d5c <HAL_SPI_Transmit+0x276>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d106      	bne.n	8002d6a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002d68:	e029      	b.n	8002dbe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1b1      	bne.n	8002cd8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	6839      	ldr	r1, [r7, #0]
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f947 	bl	800300c <SPI_EndRxTxTransaction>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10a      	bne.n	8002da8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	77fb      	strb	r3, [r7, #31]
 8002db4:	e003      	b.n	8002dbe <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002dc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002de0:	f7fd ffce 	bl	8000d80 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	4413      	add	r3, r2
 8002dee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002df0:	f7fd ffc6 	bl	8000d80 <HAL_GetTick>
 8002df4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002df6:	4b39      	ldr	r3, [pc, #228]	; (8002edc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	015b      	lsls	r3, r3, #5
 8002dfc:	0d1b      	lsrs	r3, r3, #20
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	fb02 f303 	mul.w	r3, r2, r3
 8002e04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e06:	e054      	b.n	8002eb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e0e:	d050      	beq.n	8002eb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e10:	f7fd ffb6 	bl	8000d80 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d902      	bls.n	8002e26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d13d      	bne.n	8002ea2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e3e:	d111      	bne.n	8002e64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e48:	d004      	beq.n	8002e54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e52:	d107      	bne.n	8002e64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e6c:	d10f      	bne.n	8002e8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e017      	b.n	8002ed2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	bf0c      	ite	eq
 8002ec2:	2301      	moveq	r3, #1
 8002ec4:	2300      	movne	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d19b      	bne.n	8002e08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000000 	.word	0x20000000

08002ee0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ef2:	f7fd ff45 	bl	8000d80 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	4413      	add	r3, r2
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002f02:	f7fd ff3d 	bl	8000d80 <HAL_GetTick>
 8002f06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	330c      	adds	r3, #12
 8002f0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f10:	4b3d      	ldr	r3, [pc, #244]	; (8003008 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	00da      	lsls	r2, r3, #3
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	0d1b      	lsrs	r3, r3, #20
 8002f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f28:	e060      	b.n	8002fec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f30:	d107      	bne.n	8002f42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d104      	bne.n	8002f42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f48:	d050      	beq.n	8002fec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f4a:	f7fd ff19 	bl	8000d80 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d902      	bls.n	8002f60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d13d      	bne.n	8002fdc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f78:	d111      	bne.n	8002f9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f82:	d004      	beq.n	8002f8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8c:	d107      	bne.n	8002f9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa6:	d10f      	bne.n	8002fc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e010      	b.n	8002ffe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d196      	bne.n	8002f2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3728      	adds	r7, #40	; 0x28
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000000 	.word	0x20000000

0800300c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af02      	add	r7, sp, #8
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2200      	movs	r2, #0
 8003020:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f7ff ff5b 	bl	8002ee0 <SPI_WaitFifoStateUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d007      	beq.n	8003040 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003034:	f043 0220 	orr.w	r2, r3, #32
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e027      	b.n	8003090 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2200      	movs	r2, #0
 8003048:	2180      	movs	r1, #128	; 0x80
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f7ff fec0 	bl	8002dd0 <SPI_WaitFlagStateUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305a:	f043 0220 	orr.w	r2, r3, #32
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e014      	b.n	8003090 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2200      	movs	r2, #0
 800306e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f7ff ff34 	bl	8002ee0 <SPI_WaitFifoStateUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d007      	beq.n	800308e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003082:	f043 0220 	orr.w	r2, r3, #32
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e000      	b.n	8003090 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e040      	b.n	800312c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fd fd6a 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2224      	movs	r2, #36	; 0x24
 80030c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fae0 	bl	80036a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f825 	bl	8003134 <UART_SetConfig>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e01b      	b.n	800312c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fb5f 	bl	80037e8 <UART_CheckIdleState>
 800312a:	4603      	mov	r3, r0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003138:	b08a      	sub	sp, #40	; 0x28
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	431a      	orrs	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	431a      	orrs	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	4313      	orrs	r3, r2
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4ba4      	ldr	r3, [pc, #656]	; (80033f4 <UART_SetConfig+0x2c0>)
 8003164:	4013      	ands	r3, r2
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800316c:	430b      	orrs	r3, r1
 800316e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a99      	ldr	r2, [pc, #612]	; (80033f8 <UART_SetConfig+0x2c4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d004      	beq.n	80031a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319c:	4313      	orrs	r3, r2
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b0:	430a      	orrs	r2, r1
 80031b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a90      	ldr	r2, [pc, #576]	; (80033fc <UART_SetConfig+0x2c8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d126      	bne.n	800320c <UART_SetConfig+0xd8>
 80031be:	4b90      	ldr	r3, [pc, #576]	; (8003400 <UART_SetConfig+0x2cc>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d81b      	bhi.n	8003204 <UART_SetConfig+0xd0>
 80031cc:	a201      	add	r2, pc, #4	; (adr r2, 80031d4 <UART_SetConfig+0xa0>)
 80031ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d2:	bf00      	nop
 80031d4:	080031e5 	.word	0x080031e5
 80031d8:	080031f5 	.word	0x080031f5
 80031dc:	080031ed 	.word	0x080031ed
 80031e0:	080031fd 	.word	0x080031fd
 80031e4:	2301      	movs	r3, #1
 80031e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ea:	e116      	b.n	800341a <UART_SetConfig+0x2e6>
 80031ec:	2302      	movs	r3, #2
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f2:	e112      	b.n	800341a <UART_SetConfig+0x2e6>
 80031f4:	2304      	movs	r3, #4
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fa:	e10e      	b.n	800341a <UART_SetConfig+0x2e6>
 80031fc:	2308      	movs	r3, #8
 80031fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003202:	e10a      	b.n	800341a <UART_SetConfig+0x2e6>
 8003204:	2310      	movs	r3, #16
 8003206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320a:	e106      	b.n	800341a <UART_SetConfig+0x2e6>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a7c      	ldr	r2, [pc, #496]	; (8003404 <UART_SetConfig+0x2d0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d138      	bne.n	8003288 <UART_SetConfig+0x154>
 8003216:	4b7a      	ldr	r3, [pc, #488]	; (8003400 <UART_SetConfig+0x2cc>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321c:	f003 030c 	and.w	r3, r3, #12
 8003220:	2b0c      	cmp	r3, #12
 8003222:	d82d      	bhi.n	8003280 <UART_SetConfig+0x14c>
 8003224:	a201      	add	r2, pc, #4	; (adr r2, 800322c <UART_SetConfig+0xf8>)
 8003226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322a:	bf00      	nop
 800322c:	08003261 	.word	0x08003261
 8003230:	08003281 	.word	0x08003281
 8003234:	08003281 	.word	0x08003281
 8003238:	08003281 	.word	0x08003281
 800323c:	08003271 	.word	0x08003271
 8003240:	08003281 	.word	0x08003281
 8003244:	08003281 	.word	0x08003281
 8003248:	08003281 	.word	0x08003281
 800324c:	08003269 	.word	0x08003269
 8003250:	08003281 	.word	0x08003281
 8003254:	08003281 	.word	0x08003281
 8003258:	08003281 	.word	0x08003281
 800325c:	08003279 	.word	0x08003279
 8003260:	2300      	movs	r3, #0
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003266:	e0d8      	b.n	800341a <UART_SetConfig+0x2e6>
 8003268:	2302      	movs	r3, #2
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326e:	e0d4      	b.n	800341a <UART_SetConfig+0x2e6>
 8003270:	2304      	movs	r3, #4
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003276:	e0d0      	b.n	800341a <UART_SetConfig+0x2e6>
 8003278:	2308      	movs	r3, #8
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327e:	e0cc      	b.n	800341a <UART_SetConfig+0x2e6>
 8003280:	2310      	movs	r3, #16
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003286:	e0c8      	b.n	800341a <UART_SetConfig+0x2e6>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a5e      	ldr	r2, [pc, #376]	; (8003408 <UART_SetConfig+0x2d4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d125      	bne.n	80032de <UART_SetConfig+0x1aa>
 8003292:	4b5b      	ldr	r3, [pc, #364]	; (8003400 <UART_SetConfig+0x2cc>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003298:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800329c:	2b30      	cmp	r3, #48	; 0x30
 800329e:	d016      	beq.n	80032ce <UART_SetConfig+0x19a>
 80032a0:	2b30      	cmp	r3, #48	; 0x30
 80032a2:	d818      	bhi.n	80032d6 <UART_SetConfig+0x1a2>
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d00a      	beq.n	80032be <UART_SetConfig+0x18a>
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d814      	bhi.n	80032d6 <UART_SetConfig+0x1a2>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <UART_SetConfig+0x182>
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d008      	beq.n	80032c6 <UART_SetConfig+0x192>
 80032b4:	e00f      	b.n	80032d6 <UART_SetConfig+0x1a2>
 80032b6:	2300      	movs	r3, #0
 80032b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032bc:	e0ad      	b.n	800341a <UART_SetConfig+0x2e6>
 80032be:	2302      	movs	r3, #2
 80032c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c4:	e0a9      	b.n	800341a <UART_SetConfig+0x2e6>
 80032c6:	2304      	movs	r3, #4
 80032c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032cc:	e0a5      	b.n	800341a <UART_SetConfig+0x2e6>
 80032ce:	2308      	movs	r3, #8
 80032d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d4:	e0a1      	b.n	800341a <UART_SetConfig+0x2e6>
 80032d6:	2310      	movs	r3, #16
 80032d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032dc:	e09d      	b.n	800341a <UART_SetConfig+0x2e6>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a4a      	ldr	r2, [pc, #296]	; (800340c <UART_SetConfig+0x2d8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d125      	bne.n	8003334 <UART_SetConfig+0x200>
 80032e8:	4b45      	ldr	r3, [pc, #276]	; (8003400 <UART_SetConfig+0x2cc>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032f2:	2bc0      	cmp	r3, #192	; 0xc0
 80032f4:	d016      	beq.n	8003324 <UART_SetConfig+0x1f0>
 80032f6:	2bc0      	cmp	r3, #192	; 0xc0
 80032f8:	d818      	bhi.n	800332c <UART_SetConfig+0x1f8>
 80032fa:	2b80      	cmp	r3, #128	; 0x80
 80032fc:	d00a      	beq.n	8003314 <UART_SetConfig+0x1e0>
 80032fe:	2b80      	cmp	r3, #128	; 0x80
 8003300:	d814      	bhi.n	800332c <UART_SetConfig+0x1f8>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <UART_SetConfig+0x1d8>
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d008      	beq.n	800331c <UART_SetConfig+0x1e8>
 800330a:	e00f      	b.n	800332c <UART_SetConfig+0x1f8>
 800330c:	2300      	movs	r3, #0
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003312:	e082      	b.n	800341a <UART_SetConfig+0x2e6>
 8003314:	2302      	movs	r3, #2
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331a:	e07e      	b.n	800341a <UART_SetConfig+0x2e6>
 800331c:	2304      	movs	r3, #4
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003322:	e07a      	b.n	800341a <UART_SetConfig+0x2e6>
 8003324:	2308      	movs	r3, #8
 8003326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332a:	e076      	b.n	800341a <UART_SetConfig+0x2e6>
 800332c:	2310      	movs	r3, #16
 800332e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003332:	e072      	b.n	800341a <UART_SetConfig+0x2e6>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a35      	ldr	r2, [pc, #212]	; (8003410 <UART_SetConfig+0x2dc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d12a      	bne.n	8003394 <UART_SetConfig+0x260>
 800333e:	4b30      	ldr	r3, [pc, #192]	; (8003400 <UART_SetConfig+0x2cc>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800334c:	d01a      	beq.n	8003384 <UART_SetConfig+0x250>
 800334e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003352:	d81b      	bhi.n	800338c <UART_SetConfig+0x258>
 8003354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003358:	d00c      	beq.n	8003374 <UART_SetConfig+0x240>
 800335a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335e:	d815      	bhi.n	800338c <UART_SetConfig+0x258>
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <UART_SetConfig+0x238>
 8003364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003368:	d008      	beq.n	800337c <UART_SetConfig+0x248>
 800336a:	e00f      	b.n	800338c <UART_SetConfig+0x258>
 800336c:	2300      	movs	r3, #0
 800336e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003372:	e052      	b.n	800341a <UART_SetConfig+0x2e6>
 8003374:	2302      	movs	r3, #2
 8003376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800337a:	e04e      	b.n	800341a <UART_SetConfig+0x2e6>
 800337c:	2304      	movs	r3, #4
 800337e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003382:	e04a      	b.n	800341a <UART_SetConfig+0x2e6>
 8003384:	2308      	movs	r3, #8
 8003386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800338a:	e046      	b.n	800341a <UART_SetConfig+0x2e6>
 800338c:	2310      	movs	r3, #16
 800338e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003392:	e042      	b.n	800341a <UART_SetConfig+0x2e6>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a17      	ldr	r2, [pc, #92]	; (80033f8 <UART_SetConfig+0x2c4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d13a      	bne.n	8003414 <UART_SetConfig+0x2e0>
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <UART_SetConfig+0x2cc>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033ac:	d01a      	beq.n	80033e4 <UART_SetConfig+0x2b0>
 80033ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033b2:	d81b      	bhi.n	80033ec <UART_SetConfig+0x2b8>
 80033b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b8:	d00c      	beq.n	80033d4 <UART_SetConfig+0x2a0>
 80033ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033be:	d815      	bhi.n	80033ec <UART_SetConfig+0x2b8>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <UART_SetConfig+0x298>
 80033c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c8:	d008      	beq.n	80033dc <UART_SetConfig+0x2a8>
 80033ca:	e00f      	b.n	80033ec <UART_SetConfig+0x2b8>
 80033cc:	2300      	movs	r3, #0
 80033ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d2:	e022      	b.n	800341a <UART_SetConfig+0x2e6>
 80033d4:	2302      	movs	r3, #2
 80033d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033da:	e01e      	b.n	800341a <UART_SetConfig+0x2e6>
 80033dc:	2304      	movs	r3, #4
 80033de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033e2:	e01a      	b.n	800341a <UART_SetConfig+0x2e6>
 80033e4:	2308      	movs	r3, #8
 80033e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ea:	e016      	b.n	800341a <UART_SetConfig+0x2e6>
 80033ec:	2310      	movs	r3, #16
 80033ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033f2:	e012      	b.n	800341a <UART_SetConfig+0x2e6>
 80033f4:	efff69f3 	.word	0xefff69f3
 80033f8:	40008000 	.word	0x40008000
 80033fc:	40013800 	.word	0x40013800
 8003400:	40021000 	.word	0x40021000
 8003404:	40004400 	.word	0x40004400
 8003408:	40004800 	.word	0x40004800
 800340c:	40004c00 	.word	0x40004c00
 8003410:	40005000 	.word	0x40005000
 8003414:	2310      	movs	r3, #16
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a9f      	ldr	r2, [pc, #636]	; (800369c <UART_SetConfig+0x568>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d17a      	bne.n	800351a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003424:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003428:	2b08      	cmp	r3, #8
 800342a:	d824      	bhi.n	8003476 <UART_SetConfig+0x342>
 800342c:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <UART_SetConfig+0x300>)
 800342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003432:	bf00      	nop
 8003434:	08003459 	.word	0x08003459
 8003438:	08003477 	.word	0x08003477
 800343c:	08003461 	.word	0x08003461
 8003440:	08003477 	.word	0x08003477
 8003444:	08003467 	.word	0x08003467
 8003448:	08003477 	.word	0x08003477
 800344c:	08003477 	.word	0x08003477
 8003450:	08003477 	.word	0x08003477
 8003454:	0800346f 	.word	0x0800346f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003458:	f7fe fd5a 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 800345c:	61f8      	str	r0, [r7, #28]
        break;
 800345e:	e010      	b.n	8003482 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003460:	4b8f      	ldr	r3, [pc, #572]	; (80036a0 <UART_SetConfig+0x56c>)
 8003462:	61fb      	str	r3, [r7, #28]
        break;
 8003464:	e00d      	b.n	8003482 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003466:	f7fe fcbb 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 800346a:	61f8      	str	r0, [r7, #28]
        break;
 800346c:	e009      	b.n	8003482 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800346e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003472:	61fb      	str	r3, [r7, #28]
        break;
 8003474:	e005      	b.n	8003482 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003480:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80fb 	beq.w	8003680 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	4413      	add	r3, r2
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	429a      	cmp	r2, r3
 8003498:	d305      	bcc.n	80034a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d903      	bls.n	80034ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034ac:	e0e8      	b.n	8003680 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	2200      	movs	r2, #0
 80034b2:	461c      	mov	r4, r3
 80034b4:	4615      	mov	r5, r2
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	022b      	lsls	r3, r5, #8
 80034c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80034c4:	0222      	lsls	r2, r4, #8
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	6849      	ldr	r1, [r1, #4]
 80034ca:	0849      	lsrs	r1, r1, #1
 80034cc:	2000      	movs	r0, #0
 80034ce:	4688      	mov	r8, r1
 80034d0:	4681      	mov	r9, r0
 80034d2:	eb12 0a08 	adds.w	sl, r2, r8
 80034d6:	eb43 0b09 	adc.w	fp, r3, r9
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034e8:	4650      	mov	r0, sl
 80034ea:	4659      	mov	r1, fp
 80034ec:	f7fc fe6c 	bl	80001c8 <__aeabi_uldivmod>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4613      	mov	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034fe:	d308      	bcc.n	8003512 <UART_SetConfig+0x3de>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003506:	d204      	bcs.n	8003512 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	60da      	str	r2, [r3, #12]
 8003510:	e0b6      	b.n	8003680 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003518:	e0b2      	b.n	8003680 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003522:	d15e      	bne.n	80035e2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003524:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003528:	2b08      	cmp	r3, #8
 800352a:	d828      	bhi.n	800357e <UART_SetConfig+0x44a>
 800352c:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <UART_SetConfig+0x400>)
 800352e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003532:	bf00      	nop
 8003534:	08003559 	.word	0x08003559
 8003538:	08003561 	.word	0x08003561
 800353c:	08003569 	.word	0x08003569
 8003540:	0800357f 	.word	0x0800357f
 8003544:	0800356f 	.word	0x0800356f
 8003548:	0800357f 	.word	0x0800357f
 800354c:	0800357f 	.word	0x0800357f
 8003550:	0800357f 	.word	0x0800357f
 8003554:	08003577 	.word	0x08003577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003558:	f7fe fcda 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 800355c:	61f8      	str	r0, [r7, #28]
        break;
 800355e:	e014      	b.n	800358a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003560:	f7fe fcec 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 8003564:	61f8      	str	r0, [r7, #28]
        break;
 8003566:	e010      	b.n	800358a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003568:	4b4d      	ldr	r3, [pc, #308]	; (80036a0 <UART_SetConfig+0x56c>)
 800356a:	61fb      	str	r3, [r7, #28]
        break;
 800356c:	e00d      	b.n	800358a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800356e:	f7fe fc37 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8003572:	61f8      	str	r0, [r7, #28]
        break;
 8003574:	e009      	b.n	800358a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800357a:	61fb      	str	r3, [r7, #28]
        break;
 800357c:	e005      	b.n	800358a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003588:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d077      	beq.n	8003680 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	005a      	lsls	r2, r3, #1
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	085b      	lsrs	r3, r3, #1
 800359a:	441a      	add	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2b0f      	cmp	r3, #15
 80035aa:	d916      	bls.n	80035da <UART_SetConfig+0x4a6>
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b2:	d212      	bcs.n	80035da <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f023 030f 	bic.w	r3, r3, #15
 80035bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	8afb      	ldrh	r3, [r7, #22]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	8afa      	ldrh	r2, [r7, #22]
 80035d6:	60da      	str	r2, [r3, #12]
 80035d8:	e052      	b.n	8003680 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035e0:	e04e      	b.n	8003680 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d827      	bhi.n	800363a <UART_SetConfig+0x506>
 80035ea:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <UART_SetConfig+0x4bc>)
 80035ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f0:	08003615 	.word	0x08003615
 80035f4:	0800361d 	.word	0x0800361d
 80035f8:	08003625 	.word	0x08003625
 80035fc:	0800363b 	.word	0x0800363b
 8003600:	0800362b 	.word	0x0800362b
 8003604:	0800363b 	.word	0x0800363b
 8003608:	0800363b 	.word	0x0800363b
 800360c:	0800363b 	.word	0x0800363b
 8003610:	08003633 	.word	0x08003633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003614:	f7fe fc7c 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 8003618:	61f8      	str	r0, [r7, #28]
        break;
 800361a:	e014      	b.n	8003646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800361c:	f7fe fc8e 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 8003620:	61f8      	str	r0, [r7, #28]
        break;
 8003622:	e010      	b.n	8003646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003624:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <UART_SetConfig+0x56c>)
 8003626:	61fb      	str	r3, [r7, #28]
        break;
 8003628:	e00d      	b.n	8003646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800362a:	f7fe fbd9 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 800362e:	61f8      	str	r0, [r7, #28]
        break;
 8003630:	e009      	b.n	8003646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003636:	61fb      	str	r3, [r7, #28]
        break;
 8003638:	e005      	b.n	8003646 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003644:	bf00      	nop
    }

    if (pclk != 0U)
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d019      	beq.n	8003680 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	085a      	lsrs	r2, r3, #1
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	441a      	add	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	fbb2 f3f3 	udiv	r3, r2, r3
 800365e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b0f      	cmp	r3, #15
 8003664:	d909      	bls.n	800367a <UART_SetConfig+0x546>
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800366c:	d205      	bcs.n	800367a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60da      	str	r2, [r3, #12]
 8003678:	e002      	b.n	8003680 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800368c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003690:	4618      	mov	r0, r3
 8003692:	3728      	adds	r7, #40	; 0x28
 8003694:	46bd      	mov	sp, r7
 8003696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369a:	bf00      	nop
 800369c:	40008000 	.word	0x40008000
 80036a0:	00f42400 	.word	0x00f42400

080036a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d01a      	beq.n	80037ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a2:	d10a      	bne.n	80037ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	605a      	str	r2, [r3, #4]
  }
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b098      	sub	sp, #96	; 0x60
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037f8:	f7fd fac2 	bl	8000d80 <HAL_GetTick>
 80037fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b08      	cmp	r3, #8
 800380a:	d12e      	bne.n	800386a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800380c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003814:	2200      	movs	r2, #0
 8003816:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f88c 	bl	8003938 <UART_WaitOnFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d021      	beq.n	800386a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800383a:	653b      	str	r3, [r7, #80]	; 0x50
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003844:	647b      	str	r3, [r7, #68]	; 0x44
 8003846:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800384a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e6      	bne.n	8003826 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e062      	b.n	8003930 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b04      	cmp	r3, #4
 8003876:	d149      	bne.n	800390c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003878:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003880:	2200      	movs	r2, #0
 8003882:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f856 	bl	8003938 <UART_WaitOnFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d03c      	beq.n	800390c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	623b      	str	r3, [r7, #32]
   return(result);
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b0:	633b      	str	r3, [r7, #48]	; 0x30
 80038b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e6      	bne.n	8003892 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3308      	adds	r3, #8
 80038ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	64bb      	str	r3, [r7, #72]	; 0x48
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3308      	adds	r3, #8
 80038e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038e4:	61fa      	str	r2, [r7, #28]
 80038e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	69b9      	ldr	r1, [r7, #24]
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	617b      	str	r3, [r7, #20]
   return(result);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e5      	bne.n	80038c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e011      	b.n	8003930 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3758      	adds	r7, #88	; 0x58
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003948:	e049      	b.n	80039de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003950:	d045      	beq.n	80039de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003952:	f7fd fa15 	bl	8000d80 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	429a      	cmp	r2, r3
 8003960:	d302      	bcc.n	8003968 <UART_WaitOnFlagUntilTimeout+0x30>
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e048      	b.n	80039fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d031      	beq.n	80039de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b08      	cmp	r3, #8
 8003986:	d110      	bne.n	80039aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2208      	movs	r2, #8
 800398e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f838 	bl	8003a06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2208      	movs	r2, #8
 800399a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e029      	b.n	80039fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b8:	d111      	bne.n	80039de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f81e 	bl	8003a06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e00f      	b.n	80039fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4013      	ands	r3, r2
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	bf0c      	ite	eq
 80039ee:	2301      	moveq	r3, #1
 80039f0:	2300      	movne	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d0a6      	beq.n	800394a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b095      	sub	sp, #84	; 0x54
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a2e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e6      	bne.n	8003a0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3308      	adds	r3, #8
 8003a46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e5      	bne.n	8003a40 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d118      	bne.n	8003aae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f023 0310 	bic.w	r3, r3, #16
 8003a90:	647b      	str	r3, [r7, #68]	; 0x44
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9e:	6979      	ldr	r1, [r7, #20]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	e841 2300 	strex	r3, r2, [r1]
 8003aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e6      	bne.n	8003a7c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ac2:	bf00      	nop
 8003ac4:	3754      	adds	r7, #84	; 0x54
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <memset>:
 8003ace:	4402      	add	r2, r0
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d100      	bne.n	8003ad8 <memset+0xa>
 8003ad6:	4770      	bx	lr
 8003ad8:	f803 1b01 	strb.w	r1, [r3], #1
 8003adc:	e7f9      	b.n	8003ad2 <memset+0x4>
	...

08003ae0 <__libc_init_array>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	4d0d      	ldr	r5, [pc, #52]	; (8003b18 <__libc_init_array+0x38>)
 8003ae4:	4c0d      	ldr	r4, [pc, #52]	; (8003b1c <__libc_init_array+0x3c>)
 8003ae6:	1b64      	subs	r4, r4, r5
 8003ae8:	10a4      	asrs	r4, r4, #2
 8003aea:	2600      	movs	r6, #0
 8003aec:	42a6      	cmp	r6, r4
 8003aee:	d109      	bne.n	8003b04 <__libc_init_array+0x24>
 8003af0:	4d0b      	ldr	r5, [pc, #44]	; (8003b20 <__libc_init_array+0x40>)
 8003af2:	4c0c      	ldr	r4, [pc, #48]	; (8003b24 <__libc_init_array+0x44>)
 8003af4:	f000 f818 	bl	8003b28 <_init>
 8003af8:	1b64      	subs	r4, r4, r5
 8003afa:	10a4      	asrs	r4, r4, #2
 8003afc:	2600      	movs	r6, #0
 8003afe:	42a6      	cmp	r6, r4
 8003b00:	d105      	bne.n	8003b0e <__libc_init_array+0x2e>
 8003b02:	bd70      	pop	{r4, r5, r6, pc}
 8003b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b08:	4798      	blx	r3
 8003b0a:	3601      	adds	r6, #1
 8003b0c:	e7ee      	b.n	8003aec <__libc_init_array+0xc>
 8003b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b12:	4798      	blx	r3
 8003b14:	3601      	adds	r6, #1
 8003b16:	e7f2      	b.n	8003afe <__libc_init_array+0x1e>
 8003b18:	08003ba4 	.word	0x08003ba4
 8003b1c:	08003ba4 	.word	0x08003ba4
 8003b20:	08003ba4 	.word	0x08003ba4
 8003b24:	08003ba8 	.word	0x08003ba8

08003b28 <_init>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	bf00      	nop
 8003b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2e:	bc08      	pop	{r3}
 8003b30:	469e      	mov	lr, r3
 8003b32:	4770      	bx	lr

08003b34 <_fini>:
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	bf00      	nop
 8003b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3a:	bc08      	pop	{r3}
 8003b3c:	469e      	mov	lr, r3
 8003b3e:	4770      	bx	lr
